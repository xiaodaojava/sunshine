plugins {
	id 'java'
	id 'maven-publish'
	id 'signing'
}


dependencies {
	compile project(":sunshine-common")
	implementation platform('org.springframework.boot:spring-boot-dependencies:2.3.3.RELEASE')
	compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.3.3.RELEASE"
	compileOnly group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.1'
	compileOnly 'org.springframework.boot:spring-boot-starter-data-redis:2.3.3.RELEASE'
	compileOnly 'org.springframework.boot:spring-boot-starter-web:2.3.3.RELEASE'
	compileOnly group: 'org.apache.dubbo', name: 'dubbo', version: '2.7.8'
	compileOnly group: 'org.mybatis', name: 'mybatis', version: '3.5.5'
	compileOnly group: 'org.springframework', name: 'spring-jdbc', version: '5.2.8.RELEASE'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '2.3.3.RELEASE'
	compileOnly group: 'com.aliyun.oss', name: 'aliyun-sdk-oss', version: '3.11.0'
}

// 后面的都是打包的配置
task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}
// 生成 javadoc jar
task javadocJar(type: Jar) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}
// javadoc 配置，这里是自定义了 java doc 的一些配置
javadoc {
	description = "Generates project-level javadoc for use in -javadoc jar"

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.version = true
	options.header = project.name
	options.addStringOption('Xdoclint:none', '-quiet')

	// suppress warnings due to cross-module @see and @link references;
	// note that global 'api' task does display all warnings.
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	options.encoding = "UTF-8"  //编码一定要配置否则直接出错
	options.charSet = 'UTF-8'
}

publishing {
	repositories {
		maven {
			name 'sonatypeRepository'
			url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
			credentials {
				username = project.findProperty("sonatype.username")
				password = project.findProperty("sonatype.password")
			}
		}



		publications {
			mavenJava(MavenPublication) {
				groupId = group
				version = version
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = "sunshine-starter"
					description = "java tools starter for spring-boot"
					url = "https://github.com/xiaodaojava/sunshine"
					licenses {
						license {
							name = "The Apache License, Version 2.0"
							url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
						}
					}
					developers {
						developer {
							id = "lixiang"
							name = "lixiang"
							email = "lixiang9409@vip.qq.com"
						}
					}
					scm {
						connection = "scm:git:https://github.com/xiaodaojava/sunshine.git"
						developerConnection = "scm:git:https://github.com/xiaodaojava/sunshine.git"
						url = "https://github.com/xiaodaojava/sunshine"
					}
				}

			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}